from django.http import Http404
from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect, HttpResponse
from django.template import RequestContext, loader
from django.core.urlresolvers import reverse
from django.views import generic
from .models import Choice, Question

# Create your views here.
#def index(request): # NOW REPLACED BY BELOW class IndexView
	# OPTION 1: Returning static text
	#return HttpResponse("Hello, world. You're at the polls index.")
	# OPTION 2: Returning dynamic content
	#latest_question_list = Question.objects.order_by('-pub_date')[:5]
	#output = ', '.join([p.question_text for p in latest_question_list])
	#return HttpResponse(output)
	# OPTION 3: Handing markup over to template
	#template = loader.get_template('polls/index.html')
	#context = RequestContext(request, {
	#	'latest_question_list': latest_question_list,
	#})
	#return HttpResponse(template.render(context))
	# OPTION 4: Handing markup over to template using shortcut
	#context = {'latest_question_list': latest_question_list}
	#return render(request, 'polls/index.html', context)

class IndexView(generic.ListView):
	# The ListView generic view uses a default template called 
	# <app name>/<model name>_list.html; 
	# we use template_name to tell ListView to use our existing "polls/index.html" template.
	template_name = 'polls/index.html'
	# In previous parts of the tutorial, the templates have been provided with a context 
	# that contains the question and latest_question_list context variables. 
	# For DetailView the question variable is provided automatically 
	# since we are using a Django model (Question), 
	# Django is able to determine an appropriate name for the context variable. 
	# However, for ListView, the automatically generated context variable is question_list. 
	# To override this we provide the context_object_name attribute, 
	# specifying that we want to use latest_question_list instead. 
	# As an alternative approach, you could change your templates 
	# to match the new default context variables 
	# but it is a lot easier to just tell Django to use the variable you want.
	context_object_name = 'latest_question_list'

	def get_queryset(self):
		"""Return the last five published questions."""
		return Question.objects.order_by('-pub_date')[:5]

#def detail(request, question_id): # NOW REPLACED BY BELOW class DetailView
	# OPTION 1: Returning static text
	#return HttpResponse("You're looking at question %s." % question_id)
	# OPTION 2: Returning dynamic content
	#try:
	#	question = Question.objects.get(pk=question_id)
	#except Question.DoesNotExist:
	#	raise Http404("Question does not exist")
	#return render(request, 'polls/detail.html', {'question': question})
	# OPTION 3: Returning dynamic content, using shortcut
	#question = get_object_or_404(Question, pk=question_id)
	#return render(request, 'polls/detail.html', {'question': question})

class DetailView(generic.DetailView):
	# Each generic view needs to know what model it will be acting upon. 
	# This is provided using the model attribute.
	model = Question
	# By default, the DetailView generic view uses a template called 
	# <app name>/<model name>_detail.html. 
	# In our case, it would use the template "polls/question_detail.html". 
	# The template_name attribute is used to tell Django to use a specific template name 
	# instead of the autogenerated default template name.
	template_name = 'polls/detail.html'

#def results(request, question_id): # NOW REPLACED BY BELOW class ResultsView
	#question = get_object_or_404(Question, pk=question_id)
	#return render(request, 'polls/results.html', {'question': question})
class ResultsView(generic.DetailView):
	# Each generic view needs to know what model it will be acting upon. 
	# This is provided using the model attribute.	
	model = Question
	# We also specify the template_name for the results list view 
	# this ensures that the results view and the detail view have a different appearance when rendered,
	# even though they are both a DetailView behind the scenes.
	template_name = 'polls/results.html'

def vote(request, question_id):
	p = get_object_or_404(Question, pk=question_id)
	try:
		selected_choice = p.choice_set.get(pk=request.POST['choice'])
	except (KeyError, Choice.DoesNotExist):
		# Redisplay the question voting form.
		return render(request, 'polls/detail.html', {
			'question': p,
			'error_message': "You didn't select a choice.",
		})
	else:
		selected_choice.votes += 1
		selected_choice.save()
		# Always return an HttpResponseRedirect after successfully dealing
		# with POST data. This prevents data from being posted twice if a
		# user hits the Back button.
		return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))
